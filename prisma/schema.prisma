generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model preference {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id    String      @db.Uuid
  reservation_id String      @db.Uuid
  description    String      @db.VarChar(255)
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  updated_at     DateTime    @default(now()) @db.Timestamp(6)
  user           user        @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reservation    reservation @relation(fields: [reservation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reservation {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id      String       @db.Uuid
  table_id         String       @db.Uuid
  status           String       @db.VarChar(255)
  reservation_time DateTime     @db.Timestamp(6)
  created_at       DateTime     @default(now()) @db.Timestamp(6)
  updated_at       DateTime     @default(now()) @db.Timestamp(6)
  preference       preference[]
  user             user         @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  table            table        @relation(fields: [table_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurant {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  table       table[]
  waiter      waiter[]
}

model table {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id String        @db.Uuid
  name          String        @db.VarChar(255)
  capacity      Int
  created_at    DateTime      @default(now()) @db.Timestamp(6)
  updated_at    DateTime      @default(now()) @db.Timestamp(6)
  reservation   reservation[]
  restaurant    restaurant    @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  preference  preference[]
  reservation reservation[]
  restaurant  restaurant[]
  waiter      waiter[]
}

model waiter {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String     @db.Uuid
  restaurant_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
